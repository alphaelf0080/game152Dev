// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: spine-vs:vert
      frag: spine-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: one
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        useAdditive: { value: 0.0, editor: { displayName: 'Use Additive', tooltip: '0=Normal, 1=Additive Mode' } }
}%

CCProgram spine-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 v_light;
  out vec2 v_uv;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    v_uv = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(v_uv);
    #endif
    v_light = a_color;

    return pos;
  }
}%

CCProgram spine-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 v_light;
  in vec2 v_uv;

  #pragma builtin(local)
  layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;

  uniform Constant {
    float useAdditive;
  };

  vec4 frag () {
    vec4 texColor = CCSampleWithAlphaSeparated(cc_spriteTexture, v_uv);

    #if IS_GRAY
      float gray  = 0.2126 * texColor.r + 0.7152 * texColor.g + 0.0722 * texColor.b;
      texColor.r  = texColor.g = texColor.b = gray;
    #endif

    vec4 o = texColor * v_light;
    
    // 如果啟用加法模式，增強亮度
    if (useAdditive > 0.5) {
      o.rgb = o.rgb * 2.0; // 雙倍亮度
    }

    ALPHA_TEST(o);
    return o;
  }
}%
