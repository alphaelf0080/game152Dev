// Multi-Layer Sprite Shader (4 Layers - Simplified Version)
// 簡化版本：支援 4 層的多層 Sprite Shader
// 每層都有完整的 UV 控制和色彩調整
// 功能：
// - 4 層固定配置（可輕鬆擴展到 6-8 層）
// - 每層有獨立的 SpriteFrame 紋理
// - 每層可獨立調整 UV Scale、Repeat、Offset、WrapMode
// - 每層可獨立調整 Opacity、HSV、Contrast
// - 每層支援混合模式（除底層外）
// - 所有層都支援 Clamp 邊界透明化

CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        
        # 第 0 層（底層）
        mainTexture: { value: white }
        layer0Scale: { value: [1.0, 1.0] }
        layer0Repeat: { value: [1.0, 1.0] }
        layer0Offset: { value: [0.0, 0.0] }
        layer0WrapMode: { value: 0.0, editor: { range: [0, 2], step: 1 } }
        layer0Opacity: { value: 100.0, editor: { range: [0, 100], step: 1 } }
        layer0Hue: { value: 0.0, editor: { range: [-180, 180], step: 1 } }
        layer0Saturation: { value: 0.0, editor: { range: [-100, 100], step: 1 } }
        layer0Value: { value: 0.0, editor: { range: [-100, 100], step: 1 } }
        layer0Contrast: { value: 0.0, editor: { range: [-50, 100], step: 1 } }
        
        # 第 1 層
        layer1Texture: { value: white }
        layer1Scale: { value: [1.0, 1.0] }
        layer1Repeat: { value: [1.0, 1.0] }
        layer1Offset: { value: [0.0, 0.0] }
        layer1WrapMode: { value: 0.0, editor: { range: [0, 2], step: 1 } }
        layer1Opacity: { value: 100.0, editor: { range: [0, 100], step: 1 } }
        layer1Hue: { value: 0.0, editor: { range: [-180, 180], step: 1 } }
        layer1Saturation: { value: 0.0, editor: { range: [-100, 100], step: 1 } }
        layer1Value: { value: 0.0, editor: { range: [-100, 100], step: 1 } }
        layer1Contrast: { value: 0.0, editor: { range: [-50, 100], step: 1 } }
        layer1BlendMode: { value: 0.0, editor: { range: [0, 11], step: 1 } }
        layer1BlendIntensity: { value: 1.0, editor: { range: [0, 1], step: 0.01 } }
        
        # 第 2 層
        layer2Texture: { value: white }
        layer2Scale: { value: [1.0, 1.0] }
        layer2Repeat: { value: [1.0, 1.0] }
        layer2Offset: { value: [0.0, 0.0] }
        layer2WrapMode: { value: 0.0, editor: { range: [0, 2], step: 1 } }
        layer2Opacity: { value: 100.0, editor: { range: [0, 100], step: 1 } }
        layer2Hue: { value: 0.0, editor: { range: [-180, 180], step: 1 } }
        layer2Saturation: { value: 0.0, editor: { range: [-100, 100], step: 1 } }
        layer2Value: { value: 0.0, editor: { range: [-100, 100], step: 1 } }
        layer2Contrast: { value: 0.0, editor: { range: [-50, 100], step: 1 } }
        layer2BlendMode: { value: 0.0, editor: { range: [0, 11], step: 1 } }
        layer2BlendIntensity: { value: 1.0, editor: { range: [0, 1], step: 0.01 } }
        
        # 第 3 層
        layer3Texture: { value: white }
        layer3Scale: { value: [1.0, 1.0] }
        layer3Repeat: { value: [1.0, 1.0] }
        layer3Offset: { value: [0.0, 0.0] }
        layer3WrapMode: { value: 0.0, editor: { range: [0, 2], step: 1 } }
        layer3Opacity: { value: 100.0, editor: { range: [0, 100], step: 1 } }
        layer3Hue: { value: 0.0, editor: { range: [-180, 180], step: 1 } }
        layer3Saturation: { value: 0.0, editor: { range: [-100, 100], step: 1 } }
        layer3Value: { value: 0.0, editor: { range: [-100, 100], step: 1 } }
        layer3Contrast: { value: 0.0, editor: { range: [-50, 100], step: 1 } }
        layer3BlendMode: { value: 0.0, editor: { range: [0, 11], step: 1 } }
        layer3BlendIntensity: { value: 1.0, editor: { range: [0, 1], step: 0.01 } }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 v_color;
  out vec2 v_uv;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    pos = cc_matViewProj * pos;

    v_uv = a_texCoord;
    v_color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;

  in vec4 v_color;
  in vec2 v_uv;

  uniform sampler2D mainTexture;
  uniform sampler2D layer1Texture;
  uniform sampler2D layer2Texture;
  uniform sampler2D layer3Texture;
  
  uniform vec2 layer0Scale;
  uniform vec2 layer0Repeat;
  uniform vec2 layer0Offset;
  uniform float layer0WrapMode;
  uniform float layer0Opacity;
  uniform float layer0Hue;
  uniform float layer0Saturation;
  uniform float layer0Value;
  uniform float layer0Contrast;
  
  uniform vec2 layer1Scale;
  uniform vec2 layer1Repeat;
  uniform vec2 layer1Offset;
  uniform float layer1WrapMode;
  uniform float layer1Opacity;
  uniform float layer1Hue;
  uniform float layer1Saturation;
  uniform float layer1Value;
  uniform float layer1Contrast;
  uniform float layer1BlendMode;
  uniform float layer1BlendIntensity;
  
  uniform vec2 layer2Scale;
  uniform vec2 layer2Repeat;
  uniform vec2 layer2Offset;
  uniform float layer2WrapMode;
  uniform float layer2Opacity;
  uniform float layer2Hue;
  uniform float layer2Saturation;
  uniform float layer2Value;
  uniform float layer2Contrast;
  uniform float layer2BlendMode;
  uniform float layer2BlendIntensity;
  
  uniform vec2 layer3Scale;
  uniform vec2 layer3Repeat;
  uniform vec2 layer3Offset;
  uniform float layer3WrapMode;
  uniform float layer3Opacity;
  uniform float layer3Hue;
  uniform float layer3Saturation;
  uniform float layer3Value;
  uniform float layer3Contrast;
  uniform float layer3BlendMode;
  uniform float layer3BlendIntensity;

  // RGB 轉 HSV
  vec3 rgb2hsv(vec3 rgb) {
    float maxc = max(rgb.r, max(rgb.g, rgb.b));
    float minc = min(rgb.r, min(rgb.g, rgb.b));
    float v = maxc;
    float delta = maxc - minc;
    
    float s = 0.0;
    if (maxc != 0.0) {
      s = delta / maxc;
    }
    
    float h = 0.0;
    if (delta != 0.0) {
      if (maxc == rgb.r) {
        h = (rgb.g - rgb.b) / delta;
      } else if (maxc == rgb.g) {
        h = (rgb.b - rgb.r) / delta + 2.0;
      } else {
        h = (rgb.r - rgb.g) / delta + 4.0;
      }
      h = h / 6.0;
      if (h < 0.0) h += 1.0;
    }
    
    return vec3(h, s, v);
  }

  // HSV 轉 RGB
  vec3 hsv2rgb(vec3 hsv) {
    float c = hsv.z * hsv.y;
    float x = c * (1.0 - abs(mod(hsv.x * 6.0, 2.0) - 1.0));
    float m = hsv.z - c;
    
    vec3 rgb;
    if (hsv.x < 1.0 / 6.0) rgb = vec3(c, x, 0.0);
    else if (hsv.x < 2.0 / 6.0) rgb = vec3(x, c, 0.0);
    else if (hsv.x < 3.0 / 6.0) rgb = vec3(0.0, c, x);
    else if (hsv.x < 4.0 / 6.0) rgb = vec3(0.0, x, c);
    else if (hsv.x < 5.0 / 6.0) rgb = vec3(x, 0.0, c);
    else rgb = vec3(c, 0.0, x);
    
    return rgb + m;
  }

  // 調整 HSV 和對比度
  vec3 adjustHSVC(vec3 color, float hue, float saturation, float value, float contrast) {
    vec3 hsv = rgb2hsv(color);
    
    hsv.x = mod(hsv.x + hue / 360.0, 1.0);
    hsv.y = clamp(hsv.y * (1.0 + saturation / 100.0), 0.0, 1.0);
    hsv.z = clamp(hsv.z * (1.0 + value / 100.0), 0.0, 1.0);
    
    vec3 rgb = hsv2rgb(hsv);
    float contrastFactor = 1.0 + (contrast / 100.0);
    rgb = mix(vec3(0.5), rgb, contrastFactor);
    
    return clamp(rgb, 0.0, 1.0);
  }

  // Wrap Mode 處理
  vec4 applyWrapModeWithClamp(vec2 uv, float wrapMode) {
    float mode = wrapMode;
    if (mode < 0.5) {
      vec2 clampedUV = clamp(uv, 0.0, 1.0);
      bool inBounds = (uv == clampedUV);
      return vec4(clampedUV, inBounds ? 1.0 : 0.0, 0.0);
    } else if (mode < 1.5) {
      return vec4(fract(uv), 1.0, 0.0);
    } else {
      vec2 mirrorUV = mod(uv, 2.0);
      if (mirrorUV.x > 1.0) mirrorUV.x = 2.0 - mirrorUV.x;
      if (mirrorUV.y > 1.0) mirrorUV.y = 2.0 - mirrorUV.y;
      return vec4(mirrorUV, 1.0, 0.0);
    }
  }

  // 混合模式
  vec3 applyBlendMode(vec3 base, vec3 blend, float blendMode, float intensity) {
    vec3 result = base;
    const float EPSILON = 0.001;
    
    if (blendMode < 0.5) result = mix(base, blend, intensity);
    else if (blendMode < 1.5) result = mix(base, base * blend, intensity);
    else if (blendMode < 2.5) {
      vec3 screenResult = blend + base * (vec3(1.0) - blend);
      result = mix(base, screenResult, intensity);
    }
    else if (blendMode < 3.5) {
      vec3 overlayResult = mix(
        2.0 * base * blend,
        vec3(1.0) - 2.0 * (vec3(1.0) - base) * (vec3(1.0) - blend),
        step(0.5, base)
      );
      result = mix(base, overlayResult, intensity);
    }
    else if (blendMode < 4.5) result = mix(base, min(base, blend), intensity);
    else if (blendMode < 5.5) result = mix(base, max(base, blend), intensity);
    else if (blendMode < 6.5) {
      vec3 dodgeResult = base / max(vec3(EPSILON), vec3(1.0) - blend);
      result = mix(base, clamp(dodgeResult, 0.0, 1.0), intensity);
    }
    else if (blendMode < 7.5) {
      vec3 burnResult = vec3(1.0) - (vec3(1.0) - base) / max(vec3(EPSILON), blend);
      result = mix(base, clamp(burnResult, 0.0, 1.0), intensity);
    }
    else if (blendMode < 8.5) {
      vec3 hardLightResult = mix(
        2.0 * base * blend,
        vec3(1.0) - 2.0 * (vec3(1.0) - base) * (vec3(1.0) - blend),
        step(0.5, blend)
      );
      result = mix(base, hardLightResult, intensity);
    }
    else if (blendMode < 10.5) result = mix(base, abs(base - blend), intensity);
    else {
      vec3 exclusionResult = base + blend - 2.0 * base * blend;
      result = mix(base, exclusionResult, intensity);
    }
    
    return clamp(result, 0.0, 1.0);
  }

  // 處理 UV
  vec3 processUVWithClamp(vec2 uv, vec2 scale, vec2 repeat, vec2 offset, float wrapMode) {
    vec2 scaledUV = (uv - 0.5) * scale + 0.5;
    vec2 repeatedUV = scaledUV * repeat;
    vec2 offsetUV = repeatedUV + offset;
    
    vec4 wrapResult = applyWrapModeWithClamp(offsetUV, wrapMode);
    return vec3(wrapResult.xy, wrapResult.z);
  }

  // 取樣層
  vec4 sampleLayer(sampler2D tex, vec2 uv, vec2 scale, vec2 repeat, vec2 offset, float wrapMode, 
                   float opacity, float hue, float saturation, float value, float contrast) {
    vec3 uvData = processUVWithClamp(uv, scale, repeat, offset, wrapMode);
    vec2 finalUV = uvData.xy;
    float inBounds = uvData.z;
    
    vec4 color = texture(tex, finalUV);
    color *= v_color;
    
    color.rgb = adjustHSVC(color.rgb, hue, saturation, value, contrast);
    
    float finalOpacity = (opacity / 100.0) * color.a * inBounds;
    
    return vec4(color.rgb, finalOpacity);
  }

  vec4 frag () {
    // 第 0 層
    vec4 result = sampleLayer(
      mainTexture, v_uv, layer0Scale, layer0Repeat, layer0Offset, layer0WrapMode,
      layer0Opacity, layer0Hue, layer0Saturation, layer0Value, layer0Contrast
    );

    // 第 1 層
    {
      vec4 layer1 = sampleLayer(
        layer1Texture, v_uv, layer1Scale, layer1Repeat, layer1Offset, layer1WrapMode,
        layer1Opacity, layer1Hue, layer1Saturation, layer1Value, layer1Contrast
      );
      vec3 blended = applyBlendMode(result.rgb, layer1.rgb, layer1BlendMode, layer1BlendIntensity);
      result.rgb = mix(result.rgb, blended, layer1.a);
      result.a = mix(result.a, 1.0, layer1.a);
    }

    // 第 2 層
    {
      vec4 layer2 = sampleLayer(
        layer2Texture, v_uv, layer2Scale, layer2Repeat, layer2Offset, layer2WrapMode,
        layer2Opacity, layer2Hue, layer2Saturation, layer2Value, layer2Contrast
      );
      vec3 blended = applyBlendMode(result.rgb, layer2.rgb, layer2BlendMode, layer2BlendIntensity);
      result.rgb = mix(result.rgb, blended, layer2.a);
      result.a = mix(result.a, 1.0, layer2.a);
    }

    // 第 3 層
    {
      vec4 layer3 = sampleLayer(
        layer3Texture, v_uv, layer3Scale, layer3Repeat, layer3Offset, layer3WrapMode,
        layer3Opacity, layer3Hue, layer3Saturation, layer3Value, layer3Contrast
      );
      vec3 blended = applyBlendMode(result.rgb, layer3.rgb, layer3BlendMode, layer3BlendIntensity);
      result.rgb = mix(result.rgb, blended, layer3.a);
      result.a = mix(result.a, 1.0, layer3.a);
    }

    ALPHA_TEST(result);
    return result;
  }
}%
