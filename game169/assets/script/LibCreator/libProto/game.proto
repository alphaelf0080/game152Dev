syntax = "proto2";
package gameproto;

enum EMSGID {
  eLoginCall    = 100;
  eLoginRecall  = 101;
  eConfigCall   = 102;
  eConfigRecall = 103;
  eStripsCall   = 104;
  eStripsRecall = 105;
  eResultCall   = 106;
  eResultRecall = 107;
  eOptionCall   = 108;
  eOptionRecall = 109;
  eCheckCall    = 110;
  eCheckRecall  = 111;
  eStateCall    = 112;
  eStateRecall  = 113;
  eSuicideCall  = 114;
  eDataCall		= 115;
  eDataRecall	= 116;
  eCentInAsk    = 200;
  eCentInReask  = 201;
  eJackpotInfo  = 202;
  eJackpotNotify = 203;
  eMemberInfoAsk = 301;
}

enum ESTATEID {
  K_IDLE = 0;
  K_SPIN = 1;
  K_SPINSTOPING = 2;
  K_PRE_SHOWWIN = 3;
  K_SHOWWIN = 4;
  K_WAIT = 5;
  K_FEATURE_TRIGGER = 6;
  K_FEATURE_SHOWSCATTERWIN = 7;
  K_FEATURE_TRANSLATE = 8;
  K_FEATURE_WAIT_START = 9;
  K_FEATURE_SPIN = 10;
  K_FEATURE_SPINSTOPING = 11;
  K_FEATURE_PRE_SHOWWIN = 12;
  K_FEATURE_SHOWWIN = 13;
  K_FEATURE_WAIT = 14;
  K_FEATURE_CHEKRESULT = 15;
  K_FEATURE_RETRIGGER = 16;
  K_FEATURE_SHOW_RETIGGER = 17;
  K_ENDGAME = 18;
  K_USER_DEF1=19;
  K_USER_DEF2=20;
  K_USER_DEF3=21;
  K_USER_DEF4=22;
  K_USER_DEF5=23;
  K_USER_DEF6=24;
  K_USER_DEF7=25;
  K_USER_DEF8=26;
  K_USER_DEF9=27;
  K_USER_DEF10=28;
  K_USER_DEF11=29;
  K_USER_DEF12=30;
  K_USER_DEF13=31;
  K_USER_DEF14=32;
  K_USER_DEF15=33;
  K_USER_DEF16=34;
  K_USER_DEF17=35;
  K_USER_DEF18=36;
  K_USER_DEF19=37;
  K_USER_DEF20=38;
  K_USER_DEF21=39;
  K_USER_DEF22=40;
  K_USER_DEF23=41;
  K_USER_DEF24=42;
  K_USER_DEF25=43;
  K_USER_DEF26=44;
  K_USER_DEF27=45;
  K_USER_DEF28=46;
  K_USER_DEF29=47;
  K_USER_DEF30=48;
}

enum StatusCode {
  kSuccess = 0;
  kInvalid = 1;
  kOffline = 2;
  kNoEnoughCredit = 3;
  kHostError = 4;
  kOutOfDate = 5;
  kFreeGameEnd = 6;
  kNoMoreBets = 7;
}

message Header{
  required EMSGID msgid=1;
}

message Status {
  required StatusCode msgid=1;
}

// Client to Server -------------------------------------------------

message LoginCall {
  required EMSGID msgid=1 [default=eLoginCall];
  required string member_id = 2;
  required string password = 3;
  required string machine_id = 4;
  optional string token = 5;
}

message LoginRecall {
  required EMSGID msgid=1 [default=eLoginRecall];
  required StatusCode status_code = 2;
  optional string token = 3;
}

message ConfigCall {
  required EMSGID msgid=1 [default=eConfigCall];
  required string token = 2;
  required string gameid = 3;
  optional bool clear_power_cycle = 4;
  optional uint32 version = 5;  // proto version
  optional uint32 game_version = 6;  // game version
  optional uint32 subgame_id = 7;
}

message BonusTimesCounter{
    required string module_id    = 1;
    required uint32 played_times = 2;
    required uint32 total_times  = 3;
}

message PlayerData{
  required int32  bet_index       = 3;
  required int32  line_index      = 4;
  required int32  rate_index      = 5;
}

message WinBonus{
  required string module_id = 1;
  required uint32 times     = 2;
}

message ReelStackPay{
  required uint32 icon_id    = 1;
  required uint32 pay        = 2;
  repeated uint32 reel_index = 3;
}

message Mystery{
  required uint32 to_symbol    = 1;
  required int32  to_wild_reel = 2;
}

message CommonDataInfo {
    message IntDataList {
      repeated int32 data	= 1;
    }
    message UintDataList {
      repeated uint32 data	= 1;
    }
    message MultiDataList {
      repeated IntDataList i_data	= 1;
      repeated UintDataList u_data	= 2;
    }
    optional int32 idata1						 = 1;
    optional int32 idata2						 = 2;
    optional int32 idata3						 = 3;
    optional uint32 udata1						 = 4;
    optional uint32 udata2						 = 5;
    optional uint32 udata3						 = 6;
    optional int64 idata64						 = 7;
    optional uint64 udata64						 = 8;
    optional IntDataList i_data_list1			 = 9;
	optional IntDataList i_data_list2			 = 10;
    optional UintDataList u_data_list1			 = 11;
	optional UintDataList u_data_list2			 = 12;
    optional MultiDataList multi_data_list1		 = 13;
	optional MultiDataList multi_data_list2		 = 14;
}

// slot result
enum WinLineType {
  kCommon = 0;
  kXTotalBet = 1;
  kXTotalBetTrigger = 2;
}

message WinLine {
  required WinLineType win_line_type = 1;
  required int32 line_no             = 2;
  required int32 symbol_id           = 3;
  repeated int32 pos                 = 4;
  required int32 credit              = 5;
  required int32 multiplier          = 6;
  optional uint64 credit_long        = 7;
}

message JPPay{
  required uint32 cent         = 1;
  repeated WinLine win_line_group = 2;
}

message GoldenIcon{
  required int32  symbol_id  = 1;
  required bool   is_golden  = 2;
  optional bool   is_trig    = 3;
}

message TypedWild {
  required uint32 type = 1;  // (0:Red,1:Gold)
  repeated uint32 value = 2; // (type=0:Bonus,type=1:Pay)
}

message SubResult{
  required uint32   sub_game_id           = 1;
  required uint64   credit                = 2;
  repeated WinLine  win_line_group        = 3;
  repeated int32    rng                   = 4;
  repeated WinBonus win_bonus_group       = 5;
  repeated bool     trigger_super_scatter = 6;
}

message CascadeResult {
  repeated WinLine win_line_group         = 1;
  repeated int32   random_syb_pattern     = 2;
}

message BonusBet {
  required uint32 bet = 1;
  required uint32 count = 2;
}

message CollectTimes {
  repeated uint32 times = 1;
}

message PoolInfo {
  optional uint32 pool_level = 1;
  optional uint32 lost_pool_condition = 2;
  optional uint64 lost_pool_total = 3;
}

message ArcadeMarioBar {
	repeated int32 light_bonus_rng	= 1;
	optional int32 full_award		= 2;
	repeated WinLine win_line_group = 3;
}

message RData {
  repeated uint32 data = 1;
}

message SectionData {
  required uint32 init_speed = 1;
  required uint32 differ = 2;
  repeated RData result_section = 3;
}

message ArcadeRaceGame {
  repeated uint32 rank 				= 1;
  repeated RData gold_data			= 2;
  required SectionData section_data 	= 3;
  repeated uint32 item_wins			= 4;
  required uint32 gold_win			= 5;
  repeated uint32 next_bet			= 6;
  repeated uint32 next_max_bet		= 7;
}

message BonusHit {
  required int32 type				= 1;
  required uint32 time			= 2;
  required uint32 win				= 3;
}

message ExtraData {
  repeated int32 data				= 1;
}

message ArcadeCoinPusher {
  repeated ExtraData special_pos		= 1;
  repeated uint32 wins				= 2;
  required uint32 total_win			= 3;
  repeated BonusHit bonus_hit_data	= 4;
}

message CollectSlot {
  required uint32	bar			= 1;
  required bool	enable		= 2;
  repeated int32	pattern		= 3;
  required uint32 pay			= 4;
}

message CollectAnm {
  required uint32	bar			= 1;
  required bool	enable		= 2;
  required uint32	type		= 3;
  required uint32 multiplier	= 4;
  required uint32 pay			= 5;
}

message Chance {
  required uint32 type		= 1;
}

message Fortune {
  required uint32 type		= 1;
  required uint32 multiplier	= 2;
  repeated uint32 pos			= 3;
}

message ArcadeMonopoly {
  repeated int32			light_bonus_rng		= 1;
  repeated WinLine		win_line_group		= 2;
  required CollectSlot	collect_slot		= 3;
  required CollectAnm		collect_anm			= 4;
  required Chance			chance				= 5;
  required Fortune		fortune				= 6;
}

message AttackInfo {
  optional string id = 1;
  optional uint32 level = 2;
  repeated uint32 house_level =3;
  repeated uint32 house_repair_cost =4;
}

message StealInfo {
  optional string id = 1;
  optional uint32 level = 2;
  repeated uint32 dig_pay =3;
  repeated uint32 dig_virtual_coin =4;
}

message VillageNewsInfo {
  optional uint32 type = 1;
  optional string id = 2;
  optional uint32 pay = 3;
  optional string game_time= 4;
}

message VillageInforResul {
  optional string player_id = 1;
	optional uint32 player_level = 2;
	optional uint32 virtual_coin = 3;
	optional uint32			shield_value = 4;
	optional uint32			gain_coin = 5;
	optional string			steal_player_id = 6;
	optional uint32			steal_gain_non_player_bet = 7;
	optional bool			is_get_shield = 8;
	optional uint32			fighter_value = 9;
	repeated uint32			house_level = 10;
	repeated uint32			house_update_cost = 11;
	repeated uint32			house_repair_cost = 12;
	optional uint32			next_era_update = 13;
	repeated AttackInfo		attack_info = 14;
	optional StealInfo		steal_info = 15;
	repeated VillageNewsInfo		news_info = 16;
}

message Combination {
  optional uint32	game_num	= 1;
  optional uint32	home_id		= 2;
  optional uint32	away_id		= 3;
  optional string	home_name	= 4;
  optional string	away_name	= 5;
  optional uint32 home_odds   = 6;
  optional uint32 away_odds   = 7;
  optional uint32 tie_odds    = 8;		
}

message ArcadeFootBall {
	repeated Combination	next_game_Combination	= 1;
	optional uint32			arcad_unit			= 2;
	optional uint32			bet_maximum			= 3;
	optional uint32			bet_minimum			= 4;
	optional string			video_url_prefix		= 5;
	optional string			video_url_foldername	= 6;
	optional uint32			win_pay					= 7;
}

message DinosaurInfo {
  optional uint32	id	= 1;
  optional uint32 areaNO = 2;
  optional uint32	type	= 3;
  optional uint32	star	= 4;
  optional uint32	rarity	= 5;
  optional uint32	rank	= 6;
  optional uint32 price   = 7;
  optional uint32 satiation  = 8;
  optional uint32 satiation_max  = 9;
  optional uint32 favorability  = 10;
  optional uint32 favorability_max = 11;
  optional bool	get_sick	= 12;
  optional bool	get_dirty   = 13;
  optional bool	alive		= 14;
  optional bool	rise		= 15;
  optional uint32 skin_type	= 16;
  optional string remain_time = 17;
}

message AreaInfo {
  optional bool	area_opened = 1;
  optional uint32 area_price = 2;
  optional uint32 use_scene_id = 3;
}

message FavorabilityInfoResult {
  optional uint32	id = 1;
  optional uint32 stage = 2;
  optional uint32 virtual_coin = 3;
  optional uint32 egg = 4;
  optional bool   get_mode = 5;
}

message FeedInfo {
  optional uint32 satiation_add = 1;
  optional uint32 favorability_add =2;
  optional uint32 fall_id = 3;
  optional uint32 egg = 4;
  optional uint32 pay = 5;
}

message SubgameInfo {
  optional uint32 game_type = 1;
  optional uint32 sub_game_type =2;
  optional uint32 do_times = 3;
  optional bool	go_to_optioncall = 4;
  optional uint32 pay = 5;
  optional uint32 favorability_gain = 6;
  optional uint32 virtual_coin_gain = 7;
}

message NewsInfo {
  optional uint32 type = 1;
  optional uint32 id =2;
  optional string event_time = 3;
}

message ArcadeTamagotchiResult {
	optional uint32			virtual_coin = 1;
	optional uint32				egg_amount = 2;
	optional uint32				food_amount = 3;
	repeated uint32				incubation_eggs_id = 4;
	repeated uint32				incubation_eggs_price = 5;
	repeated DinosaurInfo		Dinosaurs_data = 6;
	repeated AreaInfo			Area_data = 7;
	optional FavorabilityInfoResult	Favorability_data = 8;
	optional FeedInfo			Feed_return_data = 9;
	optional uint32				sell_dinosaur_pay = 10;
	optional SubgameInfo		sub_game_data = 11;
	repeated NewsInfo			News_data = 12;
	repeated DinosaurInfo		Dead_data = 13;
}

message RecordList {
	optional string		type = 1;
	optional uint32		amount = 2;
	optional string		game_time = 3;
}

// slot result
message SlotResult{
  required string  module_id           = 1;
  required uint64  credit              = 2;
  repeated int32   rng                 = 3;
  repeated WinLine win_line_group      = 4;
  optional int32   multiplier_alone    = 5;
  repeated int32   mulitplier_pattern  = 6;
  repeated int32   random_syb_pattern  = 7;
  optional int32   bonus_multiplier    = 8;
  repeated WinBonus win_bonus_group    = 9;
  repeated int32   be_locked_pattern   = 10;
  repeated int32   position_pay        = 11;
  repeated ReelStackPay reel_stack_pay = 12;
  repeated bool    golden_wild_flag    = 13;
  repeated uint32  pay_of_scatter      = 14;
  optional uint32  capture_award       = 15;
  optional uint32  win_line_multiple   = 16;
  optional Mystery mystery             = 17;
  optional JPPay   jp                  = 18;
  repeated bool    overlap             = 19;
  repeated uint32  pay_of_pos          = 20;
  repeated GoldenIcon  golden_icon     = 21;
  repeated bool    exp_wild            = 22;
  repeated bool    pre_exp_wild        = 23;
  optional int32  trigger_respin_times = 24;
  repeated bool    push_wild           = 25;
  optional TypedWild typed_wild        = 26;
  repeated SubResult sub_result        = 27;
  optional uint32 icon_accumulate      = 28;
  repeated int32 scatter_type          = 29;
  repeated int32 pre_scatter_type      = 30;
  optional uint32 full_pay             = 31;
  optional uint32 block_reel_index     = 32;
  repeated bool   trigger_super_scatter = 33;
  optional uint32 strip_index          = 34;
  repeated CascadeResult cascade_result    = 35;
  optional uint32 random_bonus_times       = 36;
  repeated uint32 bonus_multiplier_list    = 37;
  optional uint32 bonus_multiplier_index   = 38;
  repeated uint32 col_cascade_count        = 39;
  optional uint32 external_multiplier      = 40;
  optional uint32 pre_no_win_acc           = 41;
  optional uint32 no_win_acc               = 42;
  repeated uint32 respin_types             = 43;
  repeated uint64 respin_costs             = 44;
  optional uint32 jackpot_rng              = 45;
  optional uint32 jackpot_type             = 46;
  repeated uint32 capture_award_list       = 47;
  optional uint32 capture_award_index      = 48;
  repeated bool   golden_scatter_flag      = 49;
  optional uint32 full_symbol              = 50;
  repeated uint32 pay_of_star              = 51;
  optional uint32 collect_counter          = 52;
  optional uint32 cur_collect_counter      = 53;
  repeated uint32 upgrade_id               = 54;
  optional uint32 change_symbol_id         = 55;
  repeated uint32 full_symbol_pattern      = 56;
  optional uint32 avg_bet                  = 57;
  optional uint32 trigger_bonus_total_bet  = 58;
  repeated uint32 respin_reels             = 59;
  repeated CentInAsk cent_in_ask           = 60;
  optional uint32 next_strip_index         = 61;
  repeated BonusBet bonus_bet_list         = 62;
  optional int32 last_player_opt_index     = 63;
  repeated uint32 cur_star_counts          = 64;
  repeated CollectTimes total_star_times   = 65;
  repeated CollectTimes bonus_star_times   = 66;
  repeated uint32 cur_random_prize         = 67;
  optional PoolInfo pool_info              = 68;
  repeated uint32 crush_syb_pattern		   = 69;
  optional uint32 bonus_symbol_pos		   = 70;
  optional ArcadeMarioBar arcade_mario_bar = 71;
  optional ArcadeRaceGame race_game_data   = 72;
  optional ArcadeCoinPusher coin_pusher_data = 73;
  optional ArcadeMonopoly arcade_monopoly  = 74;
  optional PlayerData player_data          = 75;
  optional VillageInforResul village_infor      = 76;
  optional ArcadeFootBall arcade_football  = 77;
  optional ArcadeTamagotchiResult arcade_tamagotchi = 78;
  repeated RecordList record_list 			= 79;
}

message OptionResult{
  //undone(David)
  required string  module_id          = 1;
  repeated WinBonus win_bonus_group   = 2;
  optional int32   times_choice       = 3;
  repeated int32   times_options      = 4;
  optional int32   multiplier_choice  = 5;
  repeated int32   multiplier_options = 6;
  repeated int32   lock_pattern       = 7;
  repeated int32   jp888_option       = 8;
  optional int32   win_option         = 9;
  optional uint32  pay                = 10;
  optional int32   jp888_progress     = 11;
  repeated int32   money_meow_options = 13;
  optional uint32  bonus_times        = 14;
  repeated int32   choice_order       = 15;
  repeated int32   cre_options        = 16;
}

message BonusResult{
  optional SlotResult slot_result = 1;
  optional OptionResult option_result = 2;
}

message RecoverData {
  required PlayerData  player_data           = 1;
  required uint32      win_credit            = 2;
  required SlotResult  base_result           = 3;
  repeated BonusResult bonus_result_group    = 4;
  required string      cur_module            = 5;
  required string      next_module           = 6;
  repeated BonusTimesCounter bonus_times_counter = 7;
  optional MemberInfo  member_info           = 8;
  optional uint64      win_credit_long       = 9;
  optional uint64      win_credit_long_without_rate = 10;
}

message BetConfig {
  repeated int32 bet_arr = 1;
}

message LocalJackpot {
  message Award {
    required int32 id = 1;
    required uint64 pay = 2;
  }
  repeated Award award_list = 1;
}

message PsRewardRules {
  required uint32 reward_divisor = 1;
  repeated Reward reward_list = 2;
  repeated Exchange exchange_list = 3;
}

message Reward {
  required uint32 times_of_bet = 1;
  required MedalCode medal_code = 2;
}

message Exchange {
  message PsCoinByLevel {
    required uint32 level = 1;
    required uint32 count = 2;
  }
  required MemberMedal medal = 1;
  repeated PsCoinByLevel ps_coin_by_level = 2;
}

message FreeGameInfo {
  required uint32 total_times = 1;
  optional uint32 played_times = 2;
  optional uint64 total_win = 3;
}

message ModuleConfig {
  required string module_id = 1;
  repeated uint32 max_eliminate_times = 2;
}

message DataList {
  repeated int32 data	= 1;
}

message CommonDataList {
  repeated uint32 data	= 1;
}

message VillageInforConfig {
  optional string player_id = 1;
	optional uint32 player_level = 2;
	optional uint32 virtual_coin = 3;
	optional uint32		shield_value = 4;
	optional string		steal_player_id = 5;
	optional uint32		steal_gain_non_player_bet = 6;
	optional uint32		fighter_value = 7;
	repeated uint32		house_level = 8;
	repeated uint32		house_update_cost = 9;
	repeated uint32		house_repair_cost = 10;
	optional uint32		next_era_update = 11;
	repeated VillageNewsInfo	news_info = 12;
	optional uint32		min_game_bet = 13;
}

message ArcadeFootBallConfig {
  repeated Combination	game_Combination	= 1;
  optional uint32			arcad_unit			= 2;
  optional uint32			bet_maximum			= 3;
  optional uint32			bet_minimum			= 4;
  repeated uint32			bet_list			= 5;
}

message SceneInfo {
  optional bool scene_opened = 1;
  optional uint32 scene_price = 2;
  optional bool building1_opened = 3;
  optional uint32 building1_price = 4;
  optional bool building2_opened = 5;
  optional uint32 building2_price = 6;
}

message FavorabilityInfoData {
  optional uint32 id = 1;
  optional uint32 favorability = 2;
  optional uint32 favorability_max = 3;
  repeated uint32 reward = 4;
  repeated bool	reward_get = 5;
}

message ArcadeTamagotchiConfig {
	optional string			player_id = 1;
	optional uint32			virtual_coin = 2;
	optional uint32			egg_amount = 3;
	optional uint32			food_amount = 4;
	repeated DinosaurInfo	Dinosaurs_data = 5;
	repeated AreaInfo       Area_data = 6;
	repeated SceneInfo		Scene_data = 7;
	repeated FavorabilityInfoData	Favorability_data = 8;
	repeated uint32				incubation_price = 9;
	repeated NewsInfo			News_data = 10;
	repeated DinosaurInfo		Dead_data = 11;
	optional bool				isDaily_show = 12;
	optional uint32				feed_price = 13;
	optional uint32				resurrection_price = 14;
	repeated uint32				bet_list = 15;
}

message DailyReceive {
	optional uint32		daily_type = 1;
	repeated string		award_type = 2;
	repeated uint32		award_amount = 3;
	repeated uint32		award_received = 4;
	optional string		remaining_time = 5;
}

message UPSdata {
  optional uint64 upscoin_cent = 1;
  optional bool   ups_switch   = 2;
	optional uint64 threshold = 3;
	optional uint64 coin_in = 4;
  optional bool   is_transfer = 5;
  optional uint64 transfer_cent = 6;
	optional string remain_time = 7;
	optional uint32 overage_type = 8;
  optional uint64 max_cashout = 9;
}

message MarqueeData {
	optional uint32 type = 1;
	optional uint32 level = 2;
	optional string data1 = 3;
	optional string data2 = 4;
	optional uint32 show_time = 5;
	optional uint32 delay_time = 6;
}

message ConfigRecall {
  required EMSGID msgid=1 [default=eConfigRecall];
  required StatusCode status_code = 2;
  repeated int32 bet_5_arr = 3;
  repeated int32 line_5_arr = 4;
  repeated int32 rate_arr = 5;
  optional int32 rate_default_index = 6;
  repeated string language_list = 7;
  optional int32 language_default_index = 8;
  optional uint64 player_cent = 9;
  repeated int32 last_rng = 10;
  optional RecoverData recover_data = 11;
  repeated BetConfig bet_config_list = 12;
  optional SlotResult  last_bs_result = 13;
  optional MemberInfo  member_info = 14;
  repeated LocalJackpot local_jp_list = 15;
  optional PsRewardRules ps_reward_rules = 16;
  optional bool is_free_game = 17;
  optional FreeGameInfo free_game_info = 18;
  optional bool has_lobby_logged = 19;
  optional uint32 accounting_unit = 20;
  repeated ModuleConfig module_config = 21;
  repeated uint32 bet_pays = 22;
  repeated uint32 max_bets = 23;
  repeated DataList extra_datas = 24;
  repeated SlotResult last_fs_result_list = 25;
  repeated CommonDataList common_datas = 26;
  optional VillageInforConfig village_infor = 27;
  optional ArcadeFootBallConfig arcade_football = 28;
  optional ArcadeTamagotchiConfig arcade_tamagotchi = 29;
  optional DailyReceive daily_receive = 30;
  repeated RecordList record_list = 31;
  optional CommonDataInfo common_data_info = 32;
  optional UPSdata ups_data = 33;
  repeated MarqueeData marquee_data = 34;
  optional uint32 lucky_strike_block_rate = 35;
  optional uint32 law_min_bet = 36;
}

message StripsCall {
  required EMSGID msgid=1 [default=eStripsCall];
  required string token = 2;
}

message Strip {
  repeated int32 strip_arr = 1;
}

message MultiStrip {
  repeated Strip strips = 1;
}

message StripData {
  required string module_id = 1;
  repeated Strip strips = 2;
  repeated MultiStrip multi_strips = 3;
}

message StripsRecall {
  required EMSGID msgid = 1 [default=eStripsRecall];
  required StatusCode status_code = 2;
  repeated StripData allstrips = 3;
}

message ResultCall {
  required EMSGID msgid=1 [default=eResultCall];
  required string token = 2;
  required string module_id = 3;
  required int32 bet = 4;
  required int32 line = 5;
  required int32 rate = 6;
  repeated bytes module_command = 7;
  optional int32 orientation = 8;
}

message ResultRecall {
  required EMSGID      msgid                  = 1 [default=eResultRecall];
  required StatusCode status_code            = 2;
  optional SlotResult  result                 = 3;
  optional uint64      player_cent            = 4;
  optional string      next_module            = 5;
  optional int32       cur_module_play_times  = 6;
  optional int32       cur_module_total_times = 7;
  optional MemberInfo  member_info = 8;
  optional UPSdata	   ups_data				  = 9;
  repeated MarqueeData marquee_data			  = 10;
  optional uint64    accounting_sn		  	  = 11;
}

enum OPTION_MODE {
  eGetSpins = 1;
  eGetMultiplier = 2;
  eGetSpinandMultiplier = 3;
  eGetLockPattern = 4;
  eGetJp888Option = 5;
  eGetSelectGameOption = 6;
  eGetMoneyMeowOption = 7;
  eGetCreOption = 8;
  eGetCoinMasterOption = 9;
  eGetTamagotchiDinosaurOption = 10;
  eGetTamagotchiSubGame1 = 11;
  eGetTamagotchiSubGame2 = 12;
  eGetTamagotchiSubGame3 = 13;
  eGetFullRandomPay		 = 14;
}

message OptionCall {
  required EMSGID msgid = 1 [default=eOptionCall];
  required string token = 2;
  required int32 player_opt_index = 3;
  required OPTION_MODE opt_mode = 4 [default=eGetSpins];
}

message OptionRecall {
  message Option {
    required int32 item = 1;
    optional uint32 value = 2;
  }

  message ArcadeTamagotchi {
	message SubgameInfo {
		optional uint32 game_type = 1;
		optional uint32 already_times = 2;
		optional uint32 pay = 3;
		optional uint32 favorability_gain = 4;
		optional uint32 virtual_coin_gain = 5;
		optional uint32 food_gain = 6;
		repeated uint32 select_pos_array = 7;
		repeated uint32 select_pay_array = 8;
		optional bool   is_game_over = 9;
		optional uint32 step_type = 10;
	}
	optional uint32			virtual_coin = 1;
	repeated DinosaurInfo	Dinosaurs_data = 2;
	optional	SubgameInfo		sub_game_data = 3;
	repeated NewsInfo			News_data = 4;
	repeated	DinosaurInfo	Dead_data = 5;
	optional    bool			is_reach_VC_max = 6;
	optional	uint32			food_amount = 7;
  }

  required EMSGID msgid=1 [default=eOptionRecall];
  required StatusCode status_code = 2;
  optional int32 player_opt_index=3;
  repeated int32 multiplier = 4;
  repeated int32 earn_times = 5;
  optional string win_nextmodule = 6;
  repeated int32 lock_pattern = 7;
  repeated int32 jp888_option = 8;
  optional int32 win_option = 9;
  optional uint32 pay = 10;
  optional uint32 trigger_index = 11;
  repeated int32 money_meow_options = 12;
  optional uint32 bonus_times = 13;
  repeated Option options = 14;
  optional uint32 attack_level = 15;
  optional bool	  get_shield = 16;
  optional uint32 gain_coin =17;
  optional ArcadeTamagotchi arcade_tamagotchi = 18;
  optional uint64 player_cent = 19;
  optional CommonDataInfo common_data_info = 20;
  optional UPSdata ups_data = 21;
}

message CheckCall {
  required EMSGID msgid=1 [default=eCheckCall];
  required string token = 2;
  required uint64 cur_player_cent = 3;
}

message CheckRecall {
  required EMSGID msgid=1 [default=eCheckRecall];
  required StatusCode status_code = 2;
}

message StateCall {
  required EMSGID msgid = 1 [default=eStateCall];
  required string token = 2;
  required ESTATEID stateid = 3;
  repeated int32 reserved = 4;
}

message StateRecall {
  required EMSGID msgid = 1 [default=eStateRecall];
  required StatusCode status_code = 2;
}

message SuicideCall {
  required EMSGID msgid = 1 [default=eSuicideCall];
}

message PayTableCall {
}

message PayTableRecall {
}

message ArcadeFootBallData {
	repeated Combination	new_game_Combination	= 1;
	optional uint32			arcad_unit			= 2;
	optional uint32			bet_maximum			= 3;
	optional uint32			bet_minimum			= 4;
}

message DataCall {
  required EMSGID msgid			= 1 [default=eDataCall];
  required string token			= 2;
  optional uint32 target_index	= 3;
  optional uint32 target_value	= 4;
}

message ArcadeTamagotchiData {
	optional uint32			virtual_coin = 1;
	repeated DinosaurInfo	Dinosaurs_data = 2;
	repeated SceneInfo		Scene_data = 3;
	repeated AreaInfo       Area_data = 4;
	repeated NewsInfo		News_data = 5;
	repeated DinosaurInfo	Dead_data = 6;
}

message DataRecall {
  required EMSGID msgid						= 1 [default=eDataRecall];
  required StatusCode status_code			= 2;
  optional ArcadeFootBallData arcade_football	= 3;
  optional ArcadeTamagotchiData arcade_tamagotchi	= 4;
  repeated RecordList 		record_list 		= 5;
  optional uint64      		player_cent         = 6;
  optional UPSdata			ups_data			= 7;
}

// Server to Client -------------------------------------------------
enum ECENTINTYPE {
  eGeneral = 0;
  eJackpot = 1;
  eLuckyDraw = 2;
  eRedPacket = 3;
  eTreasure = 4;
}

message CentInAsk {
  required EMSGID msgid=1 [default=eCentInAsk];
  required ECENTINTYPE type = 2;
  required uint64 tid = 3;
  required uint64 cent = 4;
  optional int32 pool_id = 5;
  optional uint32 ticket = 6;
  optional uint32 featurebuy_type = 7;
}

message CentInReask {
  required EMSGID msgid = 1 [default=eCentInReask];
  required ECENTINTYPE type = 2;
  required uint64 tid = 3;
}

message Pool {
  required int32 id = 1;
  required string name = 2;
  required uint64 current_cent = 3;
  required bool enable = 4;
  optional uint64 max_cent = 5;
}

message LuckyDrawConfig {
  required bool enable = 1;
  optional uint64 begin_time = 2;
  optional uint64 end_time = 3;
  optional uint64 server_time = 4;
  optional uint32 max_round = 5;
  optional uint32 cur_round = 6;
  optional uint32 prob_config_idx = 7;
  repeated uint32 prize_bets = 8;
  repeated uint64 prize_list = 9;
  repeated uint64 featurebuy_list = 10;
}

message JackpotInfo {
  required EMSGID msgid = 1 [default=eJackpotInfo];
  repeated Pool pool_list = 2;
  required StatusCode status_code = 3;
  optional ECENTINTYPE type = 4;
  optional LuckyDrawConfig lucky_draw_config = 5;
}

message JackpotNotify {
  enum Type {
    kNearlyReached = 0;
  }
  required EMSGID msgid = 1 [default=eJackpotNotify];
  required int32 type = 2;
  optional int32 pool_id = 3;
}

message MemberInfo {
  required Type        type      = 1;
  optional uint32      level     = 2;
  repeated MemberMedal total     = 3;
  repeated MemberMedal cur_wins  = 4;
  optional uint32      ps_coin   = 5;
  optional uint64      expire_time = 6;  // Unix Epoch Time
  optional uint64      server_time = 7;  // server �ɶ�, �u�|�b ConfigRecall �^��
  optional uint32      ps_coin_sum = 8;  // �g�����ҧI����PS�����`�� (�u���b type = kTimeout �~�|��)
  optional bool        is_reached_cap = 9;
}

message MemberInfoAsk {
  required EMSGID msgid     = 1 [default=eMemberInfoAsk];
  required MemberInfo info      = 2;
}

message MemberMedal {
  required MedalCode code  = 1;
  required uint32 count = 2;
}

enum MedalCode {
  kBrown  = 0;
  kSilver = 1;
  kGold   = 2;
}

enum Level {
  kSilver  = 0;
  kGold    = 1;
  kRuby    = 2;
  kDiamond = 3;
}

enum Type {
  kGameEnd  = 0;  // ResultRecall
  kTimeout  = 1;  // MemberInfoAsk
  kConfig   = 2;  // ConfigRecall
  kUpdate   = 3;  // MemberInfoAsk
}